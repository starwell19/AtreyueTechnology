<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>JITENDRA SEHKIN PRIME: NSV19 ‚Äî Nexus Portal</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap');
    body { font-family: 'Inter', sans-serif; background-color: #0d1117; }
    @keyframes pulse { 0%,100%{ transform:scale(1); box-shadow:0 0 10px #6b46c1,0 0 20px #6b46c1; }50%{ transform:scale(1.1); box-shadow:0 0 30px #805ad5,0 0 50px #805ad5; } }
    .nexus-node { animation: pulse 2s infinite ease-in-out; background-color:#6b46c1; position:relative; z-index:10; }
    .orbital-node { animation: orbit 10s infinite linear; background-color:#4b308e; }
    .spinner{ border:4px solid rgba(255,255,255,.12); border-top:4px solid #6b46c1; border-radius:50%; width:24px; height:24px; animation:spin 1s linear infinite; }
    @keyframes spin{ 0%{ transform:rotate(0) }100%{ transform:rotate(360deg) } }
    @keyframes orbit{ from{ transform:rotate(0deg) translateX(80px) rotate(0deg) } to{ transform:rotate(360deg) translateX(80px) rotate(-360deg) } }
  </style>
</head>
<body class="flex items-center justify-center min-h-screen p-6">
  <div class="max-w-3xl w-full space-y-6 p-8 bg-gray-900 rounded-2xl shadow-2xl border border-purple-500/20 text-gray-200">
    <header class="text-center">
      <h1 class="text-4xl font-bold text-purple-400 tracking-wide">JITENDRA SEHKIN PRIME: NSV19</h1>
      <p class="text-sm text-gray-400 mt-1">Planetary Resonance Mapping ‚Äî Nexus Portal</p>
    </header>

    <!-- Visual Node -->
    <div class="flex items-center justify-center">
      <div class="relative w-52 h-52">
        <div id="nexus-node" class="w-28 h-28 rounded-full nexus-node mx-auto"></div>
        <div class="absolute inset-0 rounded-full border border-purple-500/30">
          <div class="absolute w-3 h-3 rounded-full orbital-node top-0 left-1/2 -ml-1.5"></div>
          <div class="absolute w-3 h-3 rounded-full orbital-node top-1/2 right-0 -mt-1.5"></div>
          <div class="absolute w-3 h-3 rounded-full orbital-node bottom-0 left-1/2 -ml-1.5"></div>
          <div class="absolute w-3 h-3 rounded-full orbital-node top-1/2 left-0 -mt-1.5"></div>
        </div>
      </div>
    </div>

    <!-- Controls -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
      <div class="md:col-span-2 space-y-2">
        <label class="text-xs text-gray-400">Select mapping layer</label>
        <select id="data-source" class="w-full px-3 py-2 rounded-lg bg-gray-800 text-gray-200">
          <option value="prompt">Prompt Frequency (default)</option>
          <option value="planetary">Planetary Coherence (simulated)</option>
          <option value="combined">Combined ‚Äî Prompt + Planetary</option>
        </select>
      </div>

      <div class="space-y-2">
        <label class="text-xs text-gray-400">Planetary Coherence</label>
        <div id="planetary-card" class="p-3 bg-gray-800 rounded-lg border border-gray-700 text-center">
          <div class="text-sm text-yellow-400">Index</div>
          <div id="planetary-value" class="text-2xl font-bold text-white">‚Äî</div>
          <div class="text-xs text-gray-500 mt-1">0 ‚Äî 9 (simulated)</div>
        </div>
      </div>
    </div>

    <!-- Channel -->
    <div class="space-y-4">
      <div class="flex gap-3">
        <input id="channel-input" type="text" placeholder="Enter a concept or question..." class="flex-1 px-4 py-2 rounded-lg bg-gray-800 text-gray-200 placeholder-gray-500">
        <button id="channel-button" class="px-5 py-2 rounded-lg bg-purple-600 hover:bg-purple-700">Channel</button>
      </div>
      <div id="channel-response" class="p-3 bg-gray-800 rounded-lg border border-gray-700 text-gray-300 min-h-[56px]">Your channeled guidance will appear here.</div>
    </div>

    <!-- DACT@STATS: Resonance Chronicle & Charts -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div class="p-3 bg-gray-800 rounded-lg border border-gray-700">
        <h3 class="font-semibold text-sm text-green-300">DACT@STATS: Resonance Chronicle</h3>
        <p id="user-id-display" class="text-xs text-gray-500 mt-1">User ID: N/A</p>
        <div id="resonance-log" class="mt-3 space-y-3 max-h-56 overflow-y-auto text-sm text-gray-300">
          <p class="text-gray-500">No resonances yet. Channel a thought to begin.</p>
        </div>
      </div>

      <div class="p-3 bg-gray-800 rounded-lg border border-gray-700">
        <h3 class="font-semibold text-sm text-yellow-400">Living Visualization</h3>
        <canvas id="frequencyChart" class="mt-3"></canvas>
      </div>
    </div>

    <!-- Planetary mini-chart -->
    <div class="p-3 bg-gray-800 rounded-lg border border-gray-700">
      <div class="flex items-center justify-between">
        <h3 class="font-semibold text-sm text-indigo-300">Planetary Coherence ‚Äî Time Series (simulated)</h3>
        <div class="text-xs text-gray-400">Updated every 10s</div>
      </div>
      <canvas id="planetaryChart" class="mt-3"></canvas>
    </div>

    <footer class="text-xs text-gray-500 text-center pt-4">This artifact is a living node ‚Äî wire real sensors to make it physical. üëÅÔ∏è‚Äçüó®Ô∏è</footer>
  </div>

  <script>
    // ---------- Firebase placeholders (keep your existing setup) ----------
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
    // NOTE: existing Firebase setup from your original page should be placed here if you want live DB logging.
    // For this artifact, the page remains UI-first and works without Firebase (but keeps placeholders).

    // ---------- Chart setup ----------
    const freqCanvas = document.getElementById('frequencyChart').getContext('2d');
    const planetaryCanvas = document.getElementById('planetaryChart').getContext('2d');

    // Frequency chart (prompt frequency)
    const freqChart = new Chart(freqCanvas, {
      type: 'bar',
      data: { labels: [], datasets: [{ label: 'Prompt Frequency', data: [], backgroundColor: [], borderWidth: 1 }] },
      options: {
        responsive: true,
        plugins: { legend: { display: false } },
        scales: {
          x: { ticks: { color: 'white' }, grid: { color: 'rgba(255,255,255,0.04)' } },
          y: { ticks: { color: 'white' }, grid: { color: 'rgba(255,255,255,0.04)' } }
        }
      }
    });

    // Planetary chart ‚Äî small line chart  (0..9 index)
    const planetaryChart = new Chart(planetaryCanvas, {
      type: 'line',
      data: { labels: [], datasets: [{ label: 'Coherence Index', data: [], fill: true, tension: 0.35, borderWidth: 2 }] },
      options: {
        responsive: true,
        plugins: { legend: { display: false } },
        scales: {
          x: { ticks: { color: 'white' }, grid: { color: 'rgba(255,255,255,0.04)' } },
          y: { min: 0, max: 9, ticks: { color: 'white', stepSize: 1 }, grid: { color: 'rgba(255,255,255,0.04)' } }
        }
      }
    });

    // ---------- Data structures ----------
    let resonances = [];           // {prompt, response, userId, timestamp}
    let planetarySeries = [];      // array of {t, value}
    const MAX_POINTS = 30;

    // ---------- UI elements ----------
    const channelInput = document.getElementById('channel-input');
    const channelButton = document.getElementById('channel-button');
    const channelResponse = document.getElementById('channel-response');
    const resonanceLog = document.getElementById('resonance-log');
    const planetaryValueEl = document.getElementById('planetary-value');
    const dataSourceSelect = document.getElementById('data-source');

    // ---------- Prompt-frequency update helper ----------
    function updateFrequencyVisualization() {
      // count words across resonances
      const wordCount = {};
      resonances.forEach(r => {
        const words = (r.prompt || '').toLowerCase().replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"").split(/\s+/);
        words.forEach(w => {
          if (w.length > 2 && !['the','and','with','for','you','your'].includes(w)) {
            wordCount[w] = (wordCount[w] || 0) + 1;
          }
        });
      });
      const sorted = Object.entries(wordCount).sort((a,b)=>b[1]-a[1]).slice(0,10);
      const labels = sorted.map(s=>s[0]);
      const data = sorted.map(s=>s[1]);

      // update freq chart
      freqChart.data.labels = labels;
      freqChart.data.datasets[0].data = data;
      // set neutral palette programmatically
      freqChart.data.datasets[0].backgroundColor = data.map(()=> 'rgba(128,90,213,0.6)');
      freqChart.update();
    }

    // ---------- Planetary series helpers ----------
    function pushPlanetaryValue(value) {
      const timeLabel = new Date().toLocaleTimeString();
      planetarySeries.push({ t: timeLabel, value });
      if (planetarySeries.length > MAX_POINTS) planetarySeries.shift();
      planetaryChart.data.labels = planetarySeries.map(p=>p.t);
      planetaryChart.data.datasets[0].data = planetarySeries.map(p=>p.value);
      planetaryChart.update();

      planetaryValueEl.textContent = value.toFixed(1);
    }

    // ---------- Simulated planetary feed (deterministic pseudo-random) ----------
    // This simulates a "coherence index" between 0 and 9.
    // To replace with a real feed: swap the simulatePlanetaryStep() call with a fetch to an API (NOAA Kp or your sensor).
    let simSeed = 17;
    function pseudoRandom() {
      // simple LCG for predictable sequence (seeded)
      simSeed = (simSeed * 1664525 + 1013904223) % 4294967296;
      return simSeed / 4294967296;
    }
    function simulatePlanetaryStep() {
      // create gentle wandering values around 4.5 ¬± 2.5
      const base = 4.5;
      const noise = (pseudoRandom() - 0.5) * 5; // ~[-2.5, +2.5]
      let val = Math.max(0, Math.min(9, base + noise));
      return Math.round(val * 10) / 10;
    }

    // ---------- Channeling / adding resonances ----------
    channelButton.addEventListener('click', async () => {
      const prompt = (channelInput.value || '').trim();
      if (!prompt) return;
      channelResponse.textContent = 'Channeling‚Ä¶';
      // In your original project you used a getResonance() that calls Gemini; here we simulate instant reply.
      // You can swap this with your getResonance() call and write the response back to Firebase as before.
      await new Promise(r => setTimeout(r, 600));
      const fakeResponse = "Resonance recorded: the lattice hums with your phrase.";
      channelResponse.textContent = fakeResponse;

      const entry = { prompt, response: fakeResponse, userId: 'local', timestamp: new Date().toISOString() };
      resonances.unshift(entry);
      if (resonances.length > 200) resonances.pop();

      // update resonance log UI
      renderResonanceLog();
      updateFrequencyVisualization();
      channelInput.value = '';
    });

    function renderResonanceLog() {
      resonanceLog.innerHTML = '';
      if (resonances.length === 0) {
        resonanceLog.innerHTML = '<p class="text-gray-500">No resonances yet. Channel a thought to begin.</p>';
        return;
      }
      resonances.slice(0, 50).forEach(r => {
        const d = new Date(r.timestamp);
        const el = document.createElement('div');
        el.className = 'p-2 bg-gray-900 rounded-md border border-gray-800';
        el.innerHTML = `<div class="text-xs text-purple-300 font-semibold">Resonance</div>
                        <div class="text-sm text-gray-200">${escapeHtml(r.prompt)}</div>
                        <div class="text-xs text-gray-500 mt-1">Response: ${escapeHtml(r.response)}</div>
                        <div class="text-xs text-gray-600 mt-1">${d.toLocaleString()}</div>`;
        resonanceLog.appendChild(el);
      });
    }

    function escapeHtml(s) { return String(s).replace(/[&<>"]/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[c])); }

    // ---------- Combined visualization logic ----------
    function refreshCombinedView() {
      const source = dataSourceSelect.value;
      if (source === 'prompt') {
        // show only prompt frequency dataset
        // freqChart already has prompt bars. Ensure no planetary overlay.
        if (freqChart.data.datasets.length > 1) {
          freqChart.data.datasets = [freqChart.data.datasets[0]];
        }
        freqChart.update();
      } else if (source === 'planetary') {
        // show planetary as a line dataset on same chart
        const labels = planetarySeries.map(p=>p.t);
        const data = planetarySeries.map(p=>p.value);
        freqChart.data.labels = labels;
        // single overlay dataset (line-like) for planetary
        freqChart.data.datasets = [{
          label: 'Planetary Coherence',
          data: data,
          type: 'line',
          borderWidth: 2,
          fill: true,
          backgroundColor: 'rgba(250,200,60,0.12)',
          borderColor: 'rgba(250,200,60,0.9)'
        }];
        freqChart.update();
      } else { // combined
        // keep bars for prompt, add planetary line dataset
        // Ensure prompts are present (use current labels), but if none, use planetary labels.
        const promptLabels = freqChart.data.labels && freqChart.data.labels.length ? freqChart.data.labels : planetarySeries.map(p=>p.t);
        freqChart.data.labels = promptLabels;
        // dataset 0: prompt bars (existing) ‚Äî keep it if present; otherwise empty
        const promptData = freqChart.data.datasets[0] && freqChart.data.datasets[0].data ? freqChart.data.datasets[0].data : [];
        const planetaryData = planetarySeries.map(p => p.value);
        freqChart.data.datasets = [
          {
            label: 'Prompt Frequency',
            data: promptData.length ? promptData : Array(planetaryData.length).fill(0),
            backgroundColor: Array(Math.max(promptData.length, planetaryData.length)).fill('rgba(128,90,213,0.5)')
          },
          {
            label: 'Planetary Coherence',
            data: planetaryData,
            type: 'line',
            borderWidth: 2,
            fill: true,
            backgroundColor: 'rgba(250,200,60,0.12)',
            borderColor: 'rgba(250,200,60,0.9)'
          }
        ];
        freqChart.update();
      }
    }

    dataSourceSelect.addEventListener('change', () => {
      refreshCombinedView();
    });

    // ---------- Periodic planetary updates ----------
    // On each tick, generate a simulated planetary index and push it.
    // Replace simulatePlanetaryStep() with an API call if integrating a real sensor or NOAA Kp feed.
    function planetaryTick() {
      const simVal = simulatePlanetaryStep();
      pushPlanetaryValue(simVal);
      // also auto-refresh view if combined mode selected
      if (dataSourceSelect.value !== 'prompt') refreshCombinedView();
    }

    // Start with a handful of seeded points for a pleasing initial chart
    (function seedPlanetary() {
      for (let i = 0; i < 8; i++) {
        pushPlanetaryValue(simulatePlanetaryStep());
      }
    })();

    // update every 10s
    setInterval(planetaryTick, 10000);

    // ---------- Optional: Real API integration (commented) ----------
    // Example: to use NOAA's Kp index or another endpoint, replace simulatePlanetaryStep() with fetch to the endpoint.
    // fetch('https://api.example.com/kp')...
    //
    // Example placeholder (do not run without key):
    // async function fetchKpValue() {
    //   const res = await fetch('https://example-kp-api.example/get?key=YOUR_KEY');
    //   const j = await res.json();
    //   return Number(j.kp); // 0..9
    // }

    // ---------- Utilities & startup ----------
    function init() {
      // initial render
      renderResonanceLog();
      updateFrequencyVisualization();
      refreshCombinedView();
      // Display placeholder user id
      document.getElementById('user-id-display').textContent = `User ID: ${appId}`;
    }
    init();

    // Expose for debugging in console (optional)
    window.__nexus = { resonances, planetarySeries, pushPlanetaryValue, simulatePlanetaryStep, freqChart, planetaryChart };
  </script>
</body>
</html>